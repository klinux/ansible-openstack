- name: install packages
  tags: packages
  package:
    name: "{{ item }}"
    state: latest
  with_items:
    - openstack-nova-api
    - openstack-nova-conductor
    - openstack-nova-console
    - openstack-nova-novncproxy
    - openstack-nova-scheduler

- name: install aditional packages
  tags: packages
  package:
    name: "{{ item }}"
    state: latest
  with_items:
    - openstack-placement-api
  when: openstack_release != "mitaka"

- name: install nova configuration
  tags: config
  template:
    src: "{{ item }}.j2"
    dest: "/etc/nova/{{ item }}"
  with_items:
    - nova.conf

- name: install placement configuration
  tags: config
  template:
    src: "{{ item }}.j2"
    dest: "/etc/placement/{{ item }}"
  with_items:
    - placement.conf

- name: install fixed httpd configuration
  tags: config
  copy: 
    src: "00-placement-api.conf" 
    dest: "/etc/httpd/conf.d/00-placement-api.conf"

- name: restart httpd
  service:
    name: httpd
    state: restarted
    enabled: yes
  when: not ansible_check_mode

- name: copy db create template
  template:
    src: novadb.sql.j2
    dest: /tmp/novadb.sql

- name: copy placment create template
  template:
    src: placement.sql.j2
    dest: /tmp/placement.sql

- block:
  - name: create database
    shell : mysql -u root < /tmp/novadb.sql

  - name: create database placement
    shell : mysql -u root < /tmp/placement.sql

  - name: remove sql
    file:
      path: /tmp/novadb.sql
      state: absent

  - name: remove placement sql
    file:
      path: /tmp/placement.sql
      state: absent

  - name: list users
    command: "openstack user list"
    register: ulist

  - block:
      - command: "openstack user create --domain default --password {{ nova_password }} nova"
      - command: "openstack role add --project service --user nova admin"
      - command: "openstack service create --name nova --description 'OpenStack Compute' compute"
      - command: "openstack endpoint create --region RegionOne compute {{ item }} http://{{ internal_vip_address|default(groups['controller'][0]) }}:8774/v2.1"
        with_items:
          - internal
          - public
          - admin
      - command: "{{ item }}"
        with_items:
          - "openstack user create --domain default --password {{ nova_placement_password }} placement"
          - "openstack role add --project service --user placement admin"
      - command: "openstack service create --name placement --description 'Placement API' placement"
      - command: "openstack endpoint create --region RegionOne placement {{ item }} http://{{ internal_vip_address|default(groups['controller'][0]) }}:8778"
        with_items:
          - internal
          - public
          - admin
    when: not ansible_check_mode and ulist.stdout.find("nova") < 0

  - name: permission /var/log/nova
    file: dest=/var/log/nova owner=nova group=nova mode=u=rwX,g=rX,o=rX recurse=yes

  - name: run nova db sync
    block:
      - command: nova-manage {{ item }} 
        with_items:
          - "api_db sync"
        when: not ansible_check_mode
        become: true
        become_user: nova
      - command: nova-manage {{ item }}
        with_items:
          - "cell_v2 map_cell0"
          - "cell_v2 create_cell --name=cell1 --verbose"
        when: not ansible_check_mode and openstack_release != "mitaka"
        become: true
        become_user: nova
      - command: nova-manage {{ item }}
        with_items:
          - "db sync"
        when: not ansible_check_mode
        become: true
        become_user: nova
    run_once: true

  - name: run placement db sync
    command: placement-manage db sync
    when: not ansible_check_mode
    become: true
    become_user: placement

- name: start services
  tags: service
  service:
    name: "{{ item }}"
    state: restarted
    enabled: yes
  when: not ansible_check_mode
  with_items:
    - openstack-nova-api
    - openstack-nova-console
    - openstack-nova-scheduler
    - openstack-nova-conductor
    - openstack-nova-novncproxy

- name: verify operation
  shell: nova-manage cell_v2 list_cells | grep '^| cell0'
  when: openstack_release != "mitaka"
