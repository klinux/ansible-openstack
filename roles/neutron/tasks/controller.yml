- name: install packages
  tags: packages
  package:
    name: "{{ item }}"
    state: latest
  with_items:
    - openstack-neutron
    - openstack-neutron-ml2
    - openstack-neutron-linuxbridge
    - openstack-neutron-vpnaas
    - openstack-neutron-bgp-dragent
    - openstack-neutron-metering-agent
    - python3-neutronclient
    - ebtables
    - ipset

- name: install configurations
  tags: config
  template:
    src: neutron.conf.j2
    dest: /etc/neutron/neutron.conf

- name: install ml2 config
  tags: config
  template:
    src: ml2_conf.ini.j2
    dest: /etc/neutron/plugins/ml2/ml2_conf.ini

- name: install linux bridge
  tags: config
  template:
    src: linuxbridge_agent.ini.j2
    dest: /etc/neutron/plugins/ml2/linuxbridge_agent.ini

- name: install l3 agent
  tags: config
  copy:
    src: l3_agent.ini
    dest: /etc/neutron/l3_agent.ini

- name: install dhcp agent
  copy:
    src: dhcp_agent.ini
    dest: /etc/neutron/dhcp_agent.ini

- name: install neutron lbaas
  template:
    src: neutron_lbaas.conf.j2
    dest: /etc/neutron/neutron_lbaas.conf

- name: install neutron metada agent
  template:
    src: metadata_agent.ini.j2
    dest: /etc/neutron/metadata_agent.ini

- name: install ml2 conf link
  file:
    src: /etc/neutron/plugins/ml2/ml2_conf.ini
    dest: /etc/neutron/plugin.ini
    state: link
  when: not ansible_check_mode

- name: install neutron dnsmasq config
  copy:
    src: dnsmasq-neutron.conf
    dest: /etc/neutron/dnsmasq-neutron.conf

- block:
    - name: copy db create template
      template: src=neutrondb.sql.j2 dest=/tmp/neutrondb.sql

    - name: create database
      shell: mysql -u root < /tmp/neutrondb.sql

    - name: remove sql
      file: path=/tmp/neutrondb.sql state=absent

    - name: list users
      command: "openstack user list"
      register: ulist

    - block:
        - command: "openstack user create --domain default --password {{ neutron_password }} neutron"
        - command: "openstack role add --project service --user neutron admin"
        - command: "openstack service create --name neutron --description 'OpenStack Networking' network"
        - command: "openstack endpoint create --region RegionOne network {{ item }} http://{{ internal_vip_address|default(groups['controller'][0]) }}:9696"
          with_items:
            - internal
            - public
            - admin
      when: not ansible_check_mode and ulist.stdout.find("neutron") < 0

    - name: bootstrap database
      command: neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head
      become: true
      become_user: neutron
      when: not ansible_check_mode
  run_once: true

- name: start services
  tags: service
  service:
    name: "{{ item }}"
    state: restarted
    enabled: yes
  when: not ansible_check_mode
  with_items:
    - openstack-nova-api
    - neutron-server
    - neutron-linuxbridge-agent
    - neutron-dhcp-agent
    - neutron-metadata-agent
    - neutron-l3-agent

- block:
    - name: list networks
      command: "openstack network list"
      register: ulist

    - block:
        - command: "openstack network create --share --provider-physical-network {{ provider_network }} --provider-network-type flat {{ provider_network }} --external"
        - command: "openstack subnet create --network {{ provider_network }} --subnet-range {{ provider_network_cidr }} --allocation-pool {{ provider_allocation_pool }} --dns-nameserver {{ provider_nameserver }} --gateway {{ provider_gateway }} {{ provider_network }}"
        - command: "openstack network create {{ selfservice_network }}"
        - command: "openstack subnet create --network {{ selfservice_network }} --dns-nameserver {{ selfservice_nameserver }} --gateway {{ selfservice_gateway }} --subnet-range {{ selfservice_network_cidr }} {{ selfservice_network }}"
        - command: "openstack router create default"
        - command: "openstack router add subnet default {{ selfservice_network }}"
        - command: "openstack router set default --external-gateway {{ selfservice_network }}"
          retries: 10
          delay: 3
          register: router_gateway_check
          until: router_gateway_check.rc == 0
      tags: net
      become: true
      become_user: neutron
      when: not ansible_check_mode and ulist.stdout.find("private") < 0
  run_once: true
