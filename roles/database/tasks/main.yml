- name: install mysql packages
  tags: packages
  package: name={{ item }} state=latest
  with_items:
    - mariadb 
    - mariadb-server-galera 
    - MySQL-python
    - percona-xtrabackup

- name: install mariadb config
  tags: config
  template: src=my.cnf.j2 dest=/etc/my.cnf

- name: destroy mariadb data
  shell: service mariadb stop; rm -rf /var/lib/mysql/{*,.sst}
  when: destroy_data
  args: 
    warn: false

- name: start new galera cluster
  tags: service
  command: galera_new_cluster
  when: not ansible_check_mode and groups['database'].index(inventory_hostname) == 0 and groups['database']|count > 1

- name: start mariadb
  tags: service
  service: name=mariadb state=restarted enabled=yes
  when: not ansible_check_mode and ( groups['database'].index(inventory_hostname) > 0 or groups['database']|count < 2 )

- name: test mariadb
  tags: test
  shell: mysql -u root -e "SHOW STATUS LIKE 'wsrep_cluster_size'" -Ns | cut -f2
  register: wsrep_cluster_size

- name: check cluster size
  tags: test
  debug: msg="mariadb cluster size is {{ wsrep_cluster_size.stdout }}"
  failed_when: groups['database']|count != {{ wsrep_cluster_size.stdout }}
  when: not ansible_check_mode

# rabbitmq
- name: install rabbitmq packages
  tags: packages
  package: name=rabbitmq-server state=latest

- name: destroy rabbitmq data
  shell: service rabbitmq-server stop; rm -rf /var/lib/rabbitmq/{*,.er*}
  when: destroy_data
  args: 
    warn: false

- name: start rabbitmq
  tags: service
  service: name=rabbitmq-server state=restarted enabled=yes
  when: not ansible_check_mode

- name: get rabbitmq users
  command: rabbitmqctl list_users
  register: rabbitmq_users

- name: add rabbitmq user
  command: rabbitmqctl add_user openstack {{ rabbitmq_password }}
  when: not ansible_check_mode and rabbitmq_users.stdout.find('openstack') == -1

- name: set rabbitmq permissions
  command: rabbitmqctl set_permissions openstack ".*" ".*" ".*"

- block:
  - name: stop rabbitmq
    service: name=rabbitmq-server state=stopped enabled=yes
    when: not ansible_check_mode

  - name: fetch cookie from {{ groups['database'][0] }}
    fetch: src=/var/lib/rabbitmq/.erlang.cookie dest={{ inventory_dir }}/workdir/.erlang.cookie flat=yes
    when: groups['database'].index(inventory_hostname) == 0

  - name: put cookie on cluster nodes
    copy: dest=/var/lib/rabbitmq/.erlang.cookie src={{ inventory_dir }}/workdir/.erlang.cookie owner=rabbitmq group=rabbitmq mode=400
    when: groups['database'].index(inventory_hostname) > 0

  - name: start rabbitmq
    service: name=rabbitmq-server state=started enabled=yes
    when: not ansible_check_mode

  - name: create rabbitmq cluster
    command: rabbitmqctl {{ item }}
    with_items:
      - stop_app
      - join_cluster --ram rabbit@{{ groups['database'][0] }}
      - start_app
    when: groups['database'].index(inventory_hostname) > 0

  - name: ensure ha policy
    command: "rabbitmqctl set_policy ha-all '^(?!amq\\.).*' '{\"ha-mode\": \"all\"}'"
    when: groups['database'].index(inventory_hostname) == 0

  when: groups['database']|count > 1

- name: check rabbitmq cluster
  tags: test
  shell: rabbitmqctl cluster_status | grep running_nodes | grep {{ item }}
  with_items: "{{ groups['database'] }}"

# memcached
- name: install memcached packages
  tags: packages
  package: name=memcached state=latest

- name: configure memcached
  template: src=memcached.j2 dest=/etc/sysconfig/memcached

- name: start memcached
  tags: service
  service: name=memcached state=restarted enabled=yes
  when: not ansible_check_mode

- name: install mongodb packages
  tags: packages
  package: name={{ item }} state=latest
  with_items:
    - mongodb
    - mongodb-server 

- name: install mongod config
  tags: config
  copy: src=mongod.conf dest=/etc/mongod.conf

- name: start mongodb
  service: name=mongod state=restarted enabled=yes
  when: not ansible_check_mode
